// Code generated by goctl. DO NOT EDIT.
package types

type ListClusterReq struct {
	WithVm bool `form:"with_vm,optional"`
}

type Response struct {
	Code    int         `json:"code"`
	Data    interface{} `json:"data,omitempty"`
	Message string      `json:"message,omitempty"`
}

type StaticReq struct {
	Filename string `path:"filename"`
}

type LoginReq struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

type ChpasswdReq struct {
	Username    string `json:"username"`
	OldPassword string `json:"oldPassword"`
	NewPassword string `json:"newPassword"`
}

type AddUserReq struct {
	Username string `json:"username"`
	Role     string `json:"role"`
	Tenant   string `json:"tenant"`
}

type GetDataReq struct {
	Tablename string `path:"tablename"`
	Page      int    `form:"page,default=1"`
	Size      int    `form:"size,default=20"`
	Search    string `form:"search,optional"`
	Filter    string `form:"filter,optional"`
	Range     string `form:"range,optional"`
	Sort      string `form:"sort,optional"`
	Preload   bool   `form:"preload,optional"`
}

type DataByIdReq struct {
	Tablename string `path:"tablename"`
	Id        string `path:"id"`
}

type CreateDataReq struct {
	Tablename string                 `path:"tablename"`
	Body      map[string]interface{} `json:"body"`
}

type UpdateDataReq struct {
	DataByIdReq
	Body map[string]interface{} `json:"body"`
}

type AddRepoReq struct {
	Name     string `json:"name"`
	Url      string `json:"url"`
	Username string `json:"username,optional"`
	Password string `json:"password,optional"`
}

type RepoReq struct {
	RepoName  string `path:"repo_name"`
	ChartName string `form:"chart_name,optional"`
}

type ChartReq struct {
	Name      string `path:"name"`
	ChartName string `path:"chart_name"`
}

type InstallChartReq struct {
	Cluster      string `path:"cluster"`
	Namespace    string `path:"namespace"`
	RepoUrl      string `json:"repo_url"`
	ChartName    string `json:"chart_name"`
	ChartVersion string `json:"chart_version"`
	ReleaseName  string `json:"release_name"`
	Values       string `json:"values,optional"`
	Revision     int32  `json:"revision,optional"`
}

type ListReleasesReq struct {
	Cluster     string `path:"cluster"`
	Namespace   string `path:"namespace"`
	ReleaseName string `form:"release_name,optional"`
	Revision    int32  `form:"revision,optional"`
}

type ShowValuesReq struct {
	RepoUrl      string `form:"repo_url"`
	ChartName    string `form:"chart_name"`
	ChartVersion string `form:"chart_version"`
}

type RollbackReq struct {
	Cluster     string `path:"cluster"`
	Namespace   string `path:"namespace"`
	ReleaseName string `json:"release_name"`
	Revision    int32  `json:"revision"`
}

type PatchWorkloadReq struct {
	Cluster      string `path:"cluster"`
	Namespace    string `path:"namespace"`
	WorkloadName string `path:"workload_name"`
	Container    string `form:"container"`
	Image        string `form:"image"`
}

type ListWorkloadReq struct {
	Cluster       string `path:"cluster"`
	Namespace     string `path:"namespace"`
	LabelSelector string `form:"label_selector,optional"`
}

type RolloutReq struct {
	Cluster      string `path:"cluster"`
	Namespace    string `path:"namespace"`
	WorkloadName string `path:"workload_name"`
}

type ResourceReq struct {
	Cluster      string `path:"cluster"`
	Namespace    string `path:"namespace"`
	ResourceType string `path:"resource_type"`
	ResourceName string `path:"resource_name"`
}

type PatchVariableReq struct {
	Cluster   string                 `path:"cluster"`
	Namespace string                 `path:"namespace"`
	Kind      string                 `form:"kind,optional"`
	Content   string                 `json:"content"`
	Variables map[string]interface{} `json:"variables,optional"`
}

type PatchYamlReq struct {
	Cluster   string `path:"cluster"`
	Namespace string `path:"namespace"`
	Kind      string `form:"kind,optional"`
}

type ScaleReq struct {
	Cluster   string          `path:"cluster"`
	Namespace string          `path:"namespace"`
	Workloads []ScaleWorkload `json:"workloads"`
}

type ScaleWorkload struct {
	Name     string `json:"name"`
	Replicas int    `json:"replicas"`
	Disabled bool   `json:"disabled,optional"`
}

type GetServiceReq struct {
	ServiceName string `path:"service_name"`
}

type GetPodEventReq struct {
	Cluster   string `path:"cluster"`
	Namespace string `path:"namespace"`
	PodName   string `path:"pod_name"`
}

type ListTagsReq struct {
	AppName string `form:"app_name"`
	Tag     string `form:"tag,optional"`
}

type RunTaskReq struct {
	Id          string         `json:"id,optional"`
	AppName     string         `json:"app_name"`
	TaskType    string         `json:"task_type"`
	TriggerType string         `json:"trigger_type"`
	Labels      []string       `json:"labels,optional"`
	Workloads   []TaskWorkload `json:"workloads,optional"`
	ArtifactUrl string         `json:"artifact_url,optional"` // HTTP部署用
}

type TaskWorkload struct {
	Cluster       string `json:"cluster,optional"`
	Namespace     string `json:"namespace,optional"`
	WorkloadType  string `json:"workload_type"`
	WorkloadName  string `json:"workload_name"`
	ContainerName string `json:"container_name,optional"`
	ArtifactUrl   string `json:"artifact_url,optional"`
}

type TaskIdReq struct {
	Id string `path:"id"`
}

type VmDeployReq struct {
	ArtifactUrl    string            `json:"artifact_url"`
	ArtifactHeader map[string]string `json:"artifact_header"`
	DeployPath     string            `json:"deploy_path"`
	DeployUser     string            `json:"deploy_user,optional"`
	PreCommand     string            `json:"pre_command"`
	StartCommand   string            `json:"start_command"`
	HealthCheck    HealthCheck       `json:"health_check,optional"`
	Targets        []string          `json:"targets"`
}

type HealthCheck struct {
	Type   string `json:"type"`
	Method string `json:"method,optional,omitempty"`
	Port   string `json:"port,optional,omitempty"`
	Uri    string `json:"uri,optional,omitempty"`
	Shell  string `json:"shell,optional,omitempty"`
}

type HealthCheckReq struct {
	HealthCheck
	Target string `json:"target"`
}

type HttpDeployReq struct {
	ArtifactUrl     string            `json:"artifact_url"`
	HttpMethod      string            `json:"http_method"`
	HttpUrl         string            `json:"http_url"`
	HttpHeader      map[string]string `json:"http_header"`
	HttpPath        string            `json:"http_path,optional"`
	HttpBody        string            `json:"http_body,optional"`
	HttpContentType string            `json:"http_content_type,optional"`
	ResJsonpath     string            `json:"res_jsonpath,optional"`
	ResKeyword      string            `json:"res_keyword,optional"`
	HealthCheck     HttpCheck         `json:"health_check,optional"`
}

type HttpCheck struct {
	Method          string `json:"method,optional,omitempty"`
	HttpPath        string `json:"http_path,optional,omitempty"`
	HttpBody        string `json:"http_body,optional"`
	FinishJsonpath  string `json:"finish_jsonpath,optional,omitempty"`
	FinishKeyword   string `json:"finish_keyword,optional,omitempty"`
	SuccessJsonpath string `json:"success_jsonpath,optional,omitempty"`
	SuccessKeyword  string `json:"success_keyword,optional,omitempty"`
	MsgJsonpath     string `json:"msg_jsonpath,optional"`
}

type HttpCheckReq struct {
	HttpUrl    string            `json:"http_url"`
	HttpHeader map[string]string `json:"http_header"`
	HttpCheck
}
